package cz.kr_vysocina.nis.v11.mock;

import cz.kr_vysocina.nis.v11.core.models.CDAType;
import cz.kr_vysocina.nis.v11.core.models.IdType;
import cz.kr_vysocina.nis.v11.core.models.PurposeOfUse;
import cz.kr_vysocina.nis.v11.core.models.getPsExists.DocumentMetadataModel;
import cz.kr_vysocina.nis.v11.core.models.getPsExists.GetPsExistsResponseModel;
import cz.kr_vysocina.nis.v11.core.models.getPsExists.PatientSummaryModel;
import cz.kr_vysocina.nis.v11.core.models.getPsExists.SourceIdModel;
import cz.kr_vysocina.nis.v11.core.models.sayHello.LiveSourceModel;
import cz.kr_vysocina.nis.v11.core.models.sayHello.SayHelloModel;
import cz.kr_vysocina.nis.v11.core.providers.IDataProvider;
import org.joda.time.DateTime;
import org.joda.time.format.ISODateTimeFormat;
import org.apache.commons.codec.binary.Base64;

import java.util.ArrayList;
import java.util.List;

public class MockDataProvider implements IDataProvider {

    @Override
    public SayHelloModel getSayHelloData() {

        SayHelloModel result = new SayHelloModel();

        result.setServertime(ISODateTimeFormat.dateTime().print(new DateTime()));
        result.setDescription("Test NIS api service implementing V11 standard - Zdrojový systém XYZ, verze 2.01, produkční");

        List<LiveSourceModel> liveSourceModelList = new ArrayList<>();

        LiveSourceModel liveSourceModel1 = new LiveSourceModel();
        liveSourceModel1.setSourceName("Nemocnice XYZ, a. s.");
        liveSourceModel1.setSourceIco("12345678");
        liveSourceModel1.setStatus("up");
        liveSourceModelList.add(liveSourceModel1);

        LiveSourceModel liveSourceModel2 = new LiveSourceModel();
        liveSourceModel2.setSourceName("Nemocnice ABC, a. s.");
        liveSourceModel2.setSourceIco("1665678");
        liveSourceModel2.setStatus("down");
        liveSourceModelList.add(liveSourceModel2);

        result.setLiveSourceList(liveSourceModelList);

        return result;
    }

    @Override
    public GetPsExistsResponseModel getPsExistsData(
            IdType idType,
            String idValue,
            PurposeOfUse purposeOfUse,
            String subjectNameId,
            String requestOrganizationId,
            String requestId
    ) {

        GetPsExistsResponseModel result = new GetPsExistsResponseModel();

        List<PatientSummaryModel> patientSummaryModelList = new ArrayList<>();

        PatientSummaryModel patientSummaryModel1 = new PatientSummaryModel();
        patientSummaryModel1.setSourceIdentifier("667788");
        patientSummaryModel1.setSourceName("Nemocnice XYZ, a. s.");
        patientSummaryModel1.setSourceIco("12345678");

        SourceIdModel sourceIdModel = new SourceIdModel();
        List<String> sourceIdTypeList = new ArrayList<>();
        sourceIdTypeList.add("icz");
        sourceIdTypeList.add("idxyz");

        List<String> sourceIdValueList = new ArrayList<>();
        sourceIdValueList.add("87654321");
        sourceIdValueList.add("abc123abc");

        sourceIdModel.setSourceIdTypeList(sourceIdTypeList);
        sourceIdModel.setSourceIdValueList(sourceIdValueList);

        patientSummaryModel1.setSourceId(sourceIdModel);
        patientSummaryModel1.setExists(true);
        patientSummaryModel1.setCdaL3Id("ICZ123940.1");
        patientSummaryModel1.setCdaL3oid("1.2.203.24341.1.10.35001000.4");
        patientSummaryModel1.setEffectiveTime("20171207153400");
        patientSummaryModel1.setCdaL1support(true);
        patientSummaryModel1.setCdaL1Id("ICZ123940.2");
        patientSummaryModel1.setCdaL1oid("1.2.203.24341.1.10.35001000.4");

        List<DocumentMetadataModel> documentList = new ArrayList<>();

        DocumentMetadataModel documentMetadataModel1 = new DocumentMetadataModel();
        documentMetadataModel1.setId("ICZ123940.3");
        documentMetadataModel1.setOid("1.2.203.24341.1.10.35001000.6.1");
        documentMetadataModel1.setLabel("Ambulantní zpráva ve formátu PDF");
        documentMetadataModel1.setType("ambulantni-zprava");
        documentMetadataModel1.setEffectiveTime("20220107153400");
        documentList.add(documentMetadataModel1);

        DocumentMetadataModel documentMetadataModel2 = new DocumentMetadataModel();
        documentMetadataModel2.setId("ICZ123940.4");
        documentMetadataModel2.setOid("1.2.203.24341.1.10.35001000.7.1");
        documentMetadataModel2.setLabel("Propouštěcí zpráva ve formátu PDF");
        documentMetadataModel2.setType("propousteci-zprava");
        documentMetadataModel2.setEffectiveTime("20160122153400");
        documentList.add(documentMetadataModel2);

        DocumentMetadataModel documentMetadataModel3 = new DocumentMetadataModel();
        documentMetadataModel3.setId("ICZ123940.5");
        documentMetadataModel3.setOid("1.2.203.24341.1.10.35001000.8.1");
        documentMetadataModel3.setLabel("Jakýkoliv jiný dokument ve formátu PDF");
        documentMetadataModel3.setType("ostatni");
        documentMetadataModel3.setEffectiveTime("20160122153400");
        documentList.add(documentMetadataModel3);

        patientSummaryModel1.setDocumentList(documentList);

        patientSummaryModelList.add(patientSummaryModel1);

        result.setPatientSummaryList(patientSummaryModelList);

        return result;
    }

    @Override
    public byte[] getPsCdaData(
            String sourceIdentifier,
            IdType idType,
            String idValue,
            PurposeOfUse purposeOfUse,
            String subjectNameId,
            String requestOrganizationId,
            CDAType cdaType,
            String cdaId,
            String cdaOid,
            String requestId
    ) {
        String L1base64Document = "";
        return Base64.decodeBase64(L1base64Document);
    }
}
